---
interface Props {
  apiUrl?: string;
}

const { apiUrl = 'https://status.husky.nz' } = Astro.props;

interface Service {
  id: number;
  name: string;
  status: string;
  online: boolean;
  latency: number;
}

const fetchServices = async () => {
  try {
    const response = await fetch(`${apiUrl}/api/services`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const contentType = response.headers.get("content-type") || '';
    if (contentType && !contentType.toLowerCase().includes('json')) {
      console.warn('Unexpected content-type:', contentType);
    }

    const data = await response.json();
    return data as Service[];
  } catch (error) {
    console.error('Error fetching services:', error);
    return [] as Service[];
  }
};

const services = await fetchServices();
---

<div class="p-4 flex flex-col justify-center items-center w-full">
  <h2 class="text-2xl font-semibold mb-6">Status of HuskyNZ Services</h2>
  {services.length === 0 ? (
    <p class="text-red-600 text-center">Unable to load services status</p>
  ) : (
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 w-full max-w-7xl mx-auto">
      {services.map((service) => (
        <a 
          href={`https://status.husky.nz/service/${service.id}`} 
          class="border border-gray-200/20 rounded-lg p-4 flex flex-col items-center justify-center hover:bg-gray-100/10 transition-colors duration-200"
        >
          <span class={`w-3 h-3 rounded-full mb-2 ${
            service.online ? 'bg-green-500/80' : 'bg-red-600/80'
          }`}></span>
          <span class="text-center mb-1">{service.name}</span>
          <span class="text-gray-500 text-sm">
            {service.online ? 'Service is up' : 'Service is down'}
          </span>
        </a>
      ))}
    </div>
  )}
</div>