---
import { sentences } from "@lib/sentences";
---

<style>
  .flash {
    animation: flash 1s infinite;
  }
  @keyframes flash {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  .glow {
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  }
  .animate-fade-right {
    animation: fade-right 1s forwards;
  }
  @keyframes fade-right {
    from {
      opacity: 0;
      transform: translateX(-10px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  .invisible {
    visibility: hidden;
  }
  .subheading {
    font-size: 2rem; /* Adjust this size as needed */
  }
  .headst {
    font-size: 3rem;
  }
</style>

<div id="quoutes" class="text-center h-screen flex">
  <div
    class="py-8 px-4 m-auto max-w-(--breakpoint-xl) text-center lg:py-16 z-10 relative"
  >
    <h2
      class="mb-4 text-3xl font-extrabold tracking-tight leading-none text-gray-900 md:text-4xl lg:text-5xl dark:text-white"
    >
      What people have to say about me?
    </h2>
    <p
      id="titleText"
      class="mb-4 subheading font-extrabold tracking-tight leading-none text-gray-900 md:text-4xl lg:text-5xl dark:text-white inline-block transition-all glow"
    >
    </p>
    <p
      id="cursor"
      class="mb-4 subheading font-extrabold tracking-tight leading-none text-gray-900 md:text-4xl lg:text-5xl dark:text-white inline-block flash"
    >
      |
    </p>
    <p
      id="subHeading"
      class="mb-8 text-lg font-normal lg:text-xl sm:px-16 lg:px-48 invisible"
    >
    </p>
  </div>
</div>

<script>
 import { sentences } from "@lib/sentences";
 document.addEventListener("DOMContentLoaded", () => {
  const titleElement = document.getElementById("titleText");
  const cursorElement = document.getElementById("cursor");
  const subHeadingElement = document.getElementById("subHeading");

  if (!titleElement || !cursorElement || !subHeadingElement) {
    console.error("One or more elements not found in the DOM.");
    return;
  }

  

  let currentSentenceIndex = 0;

  function type(text: string, callback?: () => void): void {
    let typedText = "";
    let i = 0;
    const interval = setInterval(() => {
      typedText += text[i];
      titleElement!.innerText = typedText; // Non-null assertion
      if (i === text.length - 1) {
        clearInterval(interval);
        cursorElement!.classList.remove("flash"); // Non-null assertion
        setTimeout(() => {
          subHeadingElement!.classList.remove("invisible"); // Non-null assertion
          subHeadingElement!.classList.add("animate-fade-right"); // Non-null assertion
          if (callback) callback();
        }, 500);
      }
      i++;
    }, 80);
  }

  function backspace(callback?: () => void): void {
    let text = titleElement!.innerText; // Non-null assertion
    const interval = setInterval(() => {
      text = text.slice(0, -1);
      titleElement!.innerText = text; // Non-null assertion
      if (text.length === 0) {
        clearInterval(interval);
        cursorElement!.classList.add("flash"); // Non-null assertion
        if (callback) callback();
      }
    }, 50);
  }

  function cycleSentences(): void {
    type(sentences[currentSentenceIndex], () => {
      setTimeout(() => {
        backspace(() => {
          subHeadingElement!.classList.add("invisible"); // Non-null assertion
          currentSentenceIndex =
            (currentSentenceIndex + 1) % sentences.length;
          setTimeout(cycleSentences, 500); // Wait before typing the next sentence
        });
      }, 2000); // Wait before clearing the text
    });
  }

  function handleScroll(): void {
    const position =
      window.scrollY || // Updated to window.scrollY
      document.documentElement.scrollTop ||
      document.body.scrollTop;
    if (position > 400) {
      cursorElement!.style.display = "none"; // Non-null assertion
      window.removeEventListener("scroll", handleScroll);
      subHeadingElement!.classList.remove("invisible"); // Non-null assertion
      subHeadingElement!.classList.add("animate-fade-right"); // Non-null assertion
    }
  }

  window.addEventListener("scroll", handleScroll);

  setTimeout(() => {
    cycleSentences();
  }, 1000);
});

</script>
